{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "pd.options.mode.chained_assignment = None \n",
    "\n",
    "from math import sqrt\n",
    "\n",
    "import os\n",
    "\n",
    "Window_size=16\n",
    "num_steps =1\n",
    "\n",
    "def lstm_data_transform(x_data, y_data, num_steps=Window_size):\n",
    "    x_array = np.array([x_data[i:i+num_steps] for i in range(x_data.shape[0]-num_steps)])\n",
    "    y_array = y_data[num_steps:]\n",
    "    return x_array, y_array\n",
    "\n",
    "def windowsfun(df, i, num_steps):\n",
    "    x_data = df.iloc[:, i].values\n",
    "    X = [x_data[i:end_ix].flatten() for i, end_ix in enumerate(range(num_steps, df.shape[0])) if end_ix < df.shape[0]]\n",
    "    return pd.DataFrame(X)\n",
    "\n",
    "def FinalDf(input_df, num_steps):\n",
    "    windowed_data = []\n",
    "    x_df = input_df.drop(['GPS_VxF'], axis=1)\n",
    "    for i in range(len(x_df.columns)):\n",
    "        windowed_feature = windowsfun(x_df, i, num_steps)\n",
    "        windowed_data.append(windowed_feature)\n",
    "    updated_df = pd.concat(windowed_data, axis=1)\n",
    "    updated_df.columns = range(len(updated_df.columns))\n",
    "    updated_df['GPS_VxF'] = input_df['GPS_VxF'].values[num_steps:]\n",
    "    return updated_df\n",
    "def sliceddf(df):\n",
    "    part=[[.2,.5],\n",
    "        [.3,.7],\n",
    "        [.7,.95],\n",
    "        [.11,.35],\n",
    "        [.45,.85],\n",
    "        [.8,.99],\n",
    "        [.35,.65],\n",
    "        [.25,.75],\n",
    "        [.6,.75]]\n",
    "    part=np.array(part)\n",
    "    part=part*(len(df))\n",
    "    part=part.astype(int)\n",
    "    df1 = pd.DataFrame(columns=['Vwhl_FL', 'Vwhl_FR', 'Vwhl_RL', 'Vwhl_RR'])\n",
    "    for x in part:\n",
    "        df1=pd.concat([df1,df.iloc[x[0]:x[1]]])\n",
    "    return df1\n",
    "Train_path=\"/home/aesicd_42/Desktop/tejas/Hyundai_project/DATA/curve__circle__snow_ice/Ice\"\n",
    "\n",
    "\n",
    "def getListOfFiles(dirName):\n",
    "    listOfFile = os.listdir(dirName)\n",
    "    allFiles = list()\n",
    "    # Iterate over all the entries\n",
    "    for entry in listOfFile:\n",
    "        # Create full path\n",
    "        fullPath = os.path.join(dirName, entry)\n",
    "        # If entry is a directory then get the list of files in this directory \n",
    "        if os.path.isdir(fullPath):\n",
    "            allFiles = allFiles + getListOfFiles(fullPath)\n",
    "        else:\n",
    "            allFiles.append(fullPath)\n",
    "                \n",
    "    return allFiles\n",
    "\n",
    "files= getListOfFiles(Train_path)\n",
    "Cons_X = list()\n",
    "cons_y = list()\n",
    "\n",
    "files_xls = [f for f in files if f[-4:] == '.csv']\n",
    "df = pd.DataFrame()\n",
    "df_new =pd.DataFrame()\n",
    "for f in files_xls:\n",
    "\n",
    "    data = pd.read_csv(f)\n",
    "    # data1=sliceddf(data)\n",
    "\n",
    "    # df =pd.concat([data1,data])\n",
    "    \n",
    "    df=data\n",
    "    \n",
    "    MAX_Vwhl_F = df[['Vwhl_FL', 'Vwhl_FR','Vwhl_RL','Vwhl_RR']].max(axis=1)\n",
    "    df['MAX_Vwhl'] = MAX_Vwhl_F\n",
    "    \n",
    "    MIN_Vwhl_R = df[['Vwhl_FL', 'Vwhl_FR','Vwhl_RL','Vwhl_RR']].min(axis=1)\n",
    "    df['MIN_Vwhl'] = MIN_Vwhl_R\n",
    "\n",
    "    MAX_MIN = df['MAX_Vwhl']/df['MIN_Vwhl']\n",
    "    df['MAX_MIN'] = MAX_MIN\n",
    "    \n",
    "    MAX_MIN_Diff=df['MAX_Vwhl']-df['MIN_Vwhl']\n",
    "    df['MAX_MIN_Diff'] = MAX_MIN_Diff\n",
    "    \n",
    "    Rear_Mean_Vwhl = df[['Vwhl_RL', 'Vwhl_RR']].mean(axis=1)\n",
    "    df['Rear_Mean_Vwhl'] = Rear_Mean_Vwhl\n",
    "    \n",
    "    Front_Max_Vwhl = df[['Vwhl_FL', 'Vwhl_FR']].mean(axis=1)\n",
    "    df['Front_Max_Vwhl'] = Front_Max_Vwhl\n",
    "\n",
    "    df['Vwhl_FL_diff'] = df['Vwhl_FL'].diff()\n",
    "    df['Vwhl_FR_diff'] = df['Vwhl_FR'].diff()\n",
    "    df['Vwhl_RL_diff'] = df['Vwhl_RL'].diff()\n",
    "    df['Vwhl_RR_diff'] = df['Vwhl_RR'].diff()\n",
    "    \n",
    "    df['Vwhl_FR_w'] = 0.0\n",
    "    df['Vwhl_FL_w'] = 0.0\n",
    "    df['Vwhl_RL_w'] = 0.0\n",
    "    df['Vwhl_RR_w'] = 0.0\n",
    "    \n",
    "    def sigmoid(x, scale=.1):\n",
    "        return 1 / (1 + np.exp(-scale * x))\n",
    "\n",
    "    # Apply sigmoid function to 'YawRate'\n",
    "    df['sigmoid_yaw_rate'] = sigmoid(df['YawRate'])\n",
    "    wfp=1.1\n",
    "    wfn=0.9\n",
    "    \n",
    "    df['Vwhl_FR_w'] = np.where(df['YawRate'] > 0, df['Vwhl_FR'] + (1 + df['sigmoid_yaw_rate']) * wfp, df['Vwhl_FR'] * wfn)\n",
    "    df['Vwhl_FL_w'] = np.where(df['YawRate'] < 0, df['Vwhl_FL'] + (-1 + df['sigmoid_yaw_rate']) * wfp, df['Vwhl_FL'] * wfn)\n",
    "    df['Vwhl_RR_w'] = np.where(df['YawRate'] > 0, df['Vwhl_RR'] + (1 + df['sigmoid_yaw_rate']) * wfp, df['Vwhl_RR'] * wfn)\n",
    "    df['Vwhl_RL_w'] = np.where(df['YawRate'] < 0, df['Vwhl_RL'] + (-1 + df['sigmoid_yaw_rate']) * wfp, df['Vwhl_RR'] * wfn)\n",
    "\n",
    "    # df = df[['Vwhl_FL','Vwhl_FL_diff','Vwhl_FR', 'Vwhl_FR_diff','Vwhl_RL', 'Vwhl_RL_diff', 'Vwhl_RR','Vwhl_RR_diff', 'MAX_MIN','Rear_Mean_Vwhl','GPS_VxF']]\n",
    "    df = df[['Vwhl_FL_w','Vwhl_FR_w', 'Vwhl_RL_w', 'Vwhl_RR_w','Rear_Mean_Vwhl', 'Front_Max_Vwhl','MAX_MIN','YawRate','GPS_VxF']]\n",
    "    df.dropna(inplace=True)\n",
    "\n",
    "\n",
    "    Filtered_df= FinalDf(df,num_steps)\n",
    "    x=Filtered_df.drop(['GPS_VxF'],axis=1)\n",
    "    y =Filtered_df[['GPS_VxF']]\n",
    "\n",
    "    x_new, y_new = lstm_data_transform(x, y, num_steps=Window_size)\n",
    "    Cons_X.append(x_new)\n",
    "    cons_y.append(y_new)\n",
    "  \n",
    "# Make final arrays\n",
    "x_array = np.array(Cons_X,dtype=object)\n",
    "y_array = np.array(cons_y,dtype=object)\n",
    "\n",
    "\n",
    "X_Train_Tensor = x_array[0]\n",
    "Y_Train_Tensor = y_array[0]\n",
    "\n",
    "for k in range(1,len(x_array)):\n",
    "    X_Train_Tensor=np.concatenate((X_Train_Tensor, x_array[k]))\n",
    "    Y_Train_Tensor=np.concatenate((Y_Train_Tensor, y_array[k]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aesicd_42/anaconda3/envs/torch/lib/python3.8/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.2\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import numpy as np\n",
    "import math\n",
    "from sklearn.model_selection import train_test_split\n",
    "import datetime\n",
    "class TransformerModel(nn.Module):\n",
    "    def __init__(self, input_size, output_size, num_heads, num_layers, hidden_size, dropout, max_length=100):\n",
    "        super(TransformerModel, self).__init__()\n",
    "        self.conv1d_1 = nn.Conv1d(in_channels=input_size, out_channels=hidden_size//2, kernel_size=3)\n",
    "        self.conv1d_2 = nn.Conv1d(in_channels=hidden_size//2, out_channels=hidden_size, kernel_size=3)\n",
    "        self.positional_encoding = PositionalEncoding(hidden_size, max_length)\n",
    "        \n",
    "        self.self_attn_layers = nn.ModuleList([\n",
    "            nn.Sequential(\n",
    "                LayerNorm(hidden_size),\n",
    "                MultiHeadAttention(embed_dim=hidden_size, num_heads=num_heads, dropout=dropout)\n",
    "            )\n",
    "            for _ in range(num_layers)\n",
    "        ])\n",
    "        \n",
    "        self.feed_forward_layers = nn.ModuleList([\n",
    "            nn.Sequential(\n",
    "                LayerNorm(hidden_size),\n",
    "                nn.Sequential(\n",
    "                    nn.Linear(hidden_size, hidden_size*2),\n",
    "                    nn.ReLU(),\n",
    "                    nn.Linear(hidden_size*2, hidden_size)\n",
    "                )\n",
    "            )\n",
    "            for _ in range(num_layers)\n",
    "        ])\n",
    "        \n",
    "        self.fc = nn.Linear(hidden_size, output_size)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = x.transpose(1, 2)  # transpose to (batch_size, input_size, seq_length)\n",
    "        x = self.conv1d_1(x)\n",
    "        x = self.conv1d_2(x)\n",
    "        x = x.transpose(1, 2)  # transpose back to (batch_size, seq_length, hidden_size)\n",
    "        x = self.positional_encoding(x)\n",
    "        \n",
    "        for self_attn, feed_forward in zip(self.self_attn_layers, self.feed_forward_layers):\n",
    "            x = x + self_attn(x)[0]\n",
    "            x = x + feed_forward(x)\n",
    "        x = torch.mean(x, dim=1)\n",
    "        x.requires_grad_(True)  # Set requires_grad to True\n",
    "        x = self.fc(x)\n",
    "        return x\n",
    "\n",
    "class MultiHeadAttention(nn.Module):\n",
    "    def __init__(self, embed_dim, num_heads, dropout=0.0):\n",
    "        super(MultiHeadAttention, self).__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.num_heads = num_heads\n",
    "        self.head_dim = embed_dim // num_heads\n",
    "\n",
    "        self.query_proj = nn.Linear(embed_dim, embed_dim)\n",
    "        self.key_proj = nn.Linear(embed_dim, embed_dim)\n",
    "        self.value_proj = nn.Linear(embed_dim, embed_dim)\n",
    "\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        self.out_proj = nn.Linear(embed_dim, embed_dim)\n",
    "\n",
    "    def forward(self, x):\n",
    "        batch_size, seq_len, embed_dim = x.size()\n",
    "        query = self.query_proj(x).view(batch_size, seq_len, self.num_heads, self.head_dim).transpose(1, 2)\n",
    "        key = self.key_proj(x).view(batch_size, seq_len, self.num_heads, self.head_dim).transpose(1, 2)\n",
    "        value = self.value_proj(x).view(batch_size, seq_len, self.num_heads, self.head_dim).transpose(1, 2)\n",
    "        scores = torch.matmul(query, key.transpose(-2, -1)) / (self.head_dim ** 0.5)\n",
    "        attn_probs = F.softsign(scores)  # Replaced softmax with softsign\n",
    "        attn_probs = self.dropout(attn_probs)\n",
    "        weighted_values = torch.matmul(attn_probs, value).transpose(1, 2).contiguous().view(batch_size, seq_len, embed_dim)\n",
    "        x = self.out_proj(weighted_values)\n",
    "        return x,\n",
    "\n",
    "\n",
    "class PositionalEncoding(nn.Module):\n",
    "    def __init__(self, d_model, max_length=100):\n",
    "        super(PositionalEncoding, self).__init__()\n",
    "        self.dropout = nn.Dropout(p=0.1)\n",
    "\n",
    "        pe = torch.zeros(max_length, d_model)\n",
    "        position = torch.arange(0, max_length, dtype=torch.float).unsqueeze(1)\n",
    "        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n",
    "\n",
    "        pe[:, 0::2] = torch.sin(position * div_term)\n",
    "        pe[:, 1::2] = torch.cos(position * div_term)\n",
    "        pe = pe.unsqueeze(0)\n",
    "        self.register_buffer('pe', pe)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = x + self.pe[:, :x.size(1), :]\n",
    "        return self.dropout(x)\n",
    "\n",
    "class LayerNorm(nn.Module):\n",
    "    def __init__(self, features, eps=1e-6):\n",
    "        super(LayerNorm, self).__init__()\n",
    "        self.features = features\n",
    "        self.eps = eps\n",
    "        self.weight = nn.Parameter(torch.ones(features))\n",
    "        self.bias = nn.Parameter(torch.zeros(features))\n",
    "\n",
    "    def forward(self, x):\n",
    "        mean = x.mean(dim=-1, keepdim=True)\n",
    "        std = x.std(dim=-1, keepdim=True)\n",
    "        normalized = (x - mean) / (std + self.eps)\n",
    "        return self.weight * normalized + self.bias\n",
    "    \n",
    "class CustomLoss(nn.Module):\n",
    "    def __init__(self, penalty_weight=2.0):\n",
    "        super(CustomLoss, self).__init__()\n",
    "        self.mse_loss = nn.MSELoss()\n",
    "        self.penalty_weight = penalty_weight\n",
    "\n",
    "    def forward(self, predictions, targets):\n",
    "        mse = self.mse_loss(predictions, targets)\n",
    "        absolute_error = torch.abs(predictions - targets)\n",
    "        count = torch.count_nonzero(absolute_error >= 2.5)\n",
    "        per = count / len(targets)\n",
    "        penalty = torch.where(absolute_error >= 1.5, (absolute_error - 1.5) * self.penalty_weight, torch.zeros_like(absolute_error))\n",
    "        loss = mse/2 + penalty.mean() + per*4\n",
    "        return loss\n",
    "    \n",
    "# Set hyperparameters\n",
    "NUMBER_HEADS=2\n",
    "INPUT_SIZE = 8\n",
    "OUTPUT_SIZE = 1\n",
    "NUM_LAYERS = 2\n",
    "HIDDEN_SIZE = 32\n",
    "DROPOUT = 0.1\n",
    "LEARNING_RATE = 0.001\n",
    "BATCH_SIZE = 8192*2*2*4\n",
    "NUM_EPOCHS = 500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = TransformerModel(INPUT_SIZE, OUTPUT_SIZE, NUMBER_HEADS,NUM_LAYERS, HIDDEN_SIZE, DROPOUT).to(device)\n",
    "\n",
    "optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "criterion = CustomLoss()\n",
    "# Create data loaders\n",
    "train_dataset = torch.utils.data.TensorDataset(torch.tensor(X_train).float(), torch.tensor(y_train).float())\n",
    "test_dataset = torch.utils.data.TensorDataset(torch.tensor(X_test).float(), torch.tensor(y_test).float())\n",
    "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=False)\n",
    "test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n",
    "\n",
    "# Train the model\n",
    "from tqdm import tqdm\n",
    "\n",
    "import csv\n",
    "\n",
    "train_losses = []\n",
    "test_losses = []\n",
    "best_test_loss = float('inf')\n",
    "best_model_path = 'best_model_trial_06.pth'\n",
    "\n",
    "for epoch in range(NUM_EPOCHS):\n",
    "    model.train()\n",
    "    train_loss = 0.0\n",
    "    with tqdm(train_loader, desc=f\"Epoch {epoch+1}/{NUM_EPOCHS}: train\", leave=False) as pbar:\n",
    "        for i, (inputs, labels) in enumerate(pbar):\n",
    "            inputs = inputs.to(device)\n",
    "            labels = labels.to(device)\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            train_loss += loss.item() * inputs.size(0)\n",
    "            pbar.set_postfix({\"loss\": f\"{loss.item():.4f}\"})\n",
    "        train_loss /= len(train_loader.dataset)\n",
    "\n",
    "    model.eval()\n",
    "    test_loss = 0.0\n",
    "    with torch.no_grad():\n",
    "        with tqdm(test_loader, desc=f\"Epoch {epoch+1}/{NUM_EPOCHS}: test\", leave=False) as pbar:\n",
    "            for inputs, labels in pbar:\n",
    "                inputs = inputs.to(device)\n",
    "                labels = labels.to(device)\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs, labels)\n",
    "                test_loss += loss.item() * inputs.size(0)\n",
    "                pbar.set_postfix({\"loss\": f\"{loss.item():.4f}\"})\n",
    "            test_loss /= len(test_loader.dataset)\n",
    "\n",
    "    train_losses.append(train_loss)\n",
    "    test_losses.append(test_loss)\n",
    "\n",
    "    print(f\"Epoch {epoch+1}/{NUM_EPOCHS}: train_loss={train_loss:.4f}, test_loss={test_loss:.4f}\")\n",
    "\n",
    "    if test_loss < best_test_loss:\n",
    "        best_test_loss = test_loss\n",
    "        torch.save(model.state_dict(), best_model_path)\n",
    "        \n",
    "filename = \"losses_1.csv\"  # Change the filename as desired\n",
    "\n",
    "with open(filename, mode='w', newline='') as file:\n",
    "    writer = csv.writer(file)\n",
    "    writer.writerow([\"Epoch\", \"Train Loss\", \"Test Loss\"])  # Write header\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        writer.writerow([epoch+1, train_losses[epoch], test_losses[epoch]])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "torch",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
